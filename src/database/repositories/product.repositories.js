import { Product } from "../models/product.model.js";

class ProductRepository {
  async FindProductById({ item_id }) {
    return await Product.findOne({ item_id });
  }

  async UpdataProduct({
    _id,
    item_id,
    name,
    item_name,
    unit,
    status,
    source,
    is_linked_with_zohocrm,
    zcrm_product_id,
    description,
    rate,
    tax_id,
    tax_name,
    tax_percentage,
    purchase_account_id,
    purchase_account_name,
    account_id,
    account_name,
    purchase_description,
    purchase_rate,
    item_type,
    product_type,
    is_taxable,
    tax_exemption_id,
    tax_exemption_code,
    stock_on_hand,
    has_attachment,
    available_stock,
    actual_available_stock,
    sku,
    reorder_level,
    created_time,
    last_modified_time,
    cf_movemet_measure,
    cf_movemet_measure_unformatted,
    cf_storage_condition,
    cf_storage_condition_unformatted,
    cf_classification,
    cf_classification_unformatted,
    cf_component_type,
    cf_component_type_unformatted,
    cf_usage_unit,
    cf_usage_unit_unformatted,
    category,
    subCategory,
    image,
    additionalDescription,
    available_size,
    available_flavor,
  }) {
    return await Product.findOneAndUpdate(
      { _id },
      {
        item_id,
        name,
        item_name,
        unit,
        status,
        source,
        is_linked_with_zohocrm,
        zcrm_product_id,
        description,
        rate,
        tax_id,
        tax_name,
        tax_percentage,
        purchase_account_id,
        purchase_account_name,
        account_id,
        account_name,
        purchase_description,
        purchase_rate,
        item_type,
        product_type,
        is_taxable,
        tax_exemption_id,
        tax_exemption_code,
        stock_on_hand,
        has_attachment,
        available_stock,
        actual_available_stock,
        sku,
        reorder_level,
        created_time,
        last_modified_time,
        cf_movemet_measure,
        cf_movemet_measure_unformatted,
        cf_storage_condition,
        cf_storage_condition_unformatted,
        cf_classification,
        cf_classification_unformatted,
        cf_component_type,
        cf_component_type_unformatted,
        cf_usage_unit,
        cf_usage_unit_unformatted,
        category,
        subCategory,
        image,
        additionalDescription,
        available_size,
        available_flavor,
      },
      { upsert: true }
    );
  }
}

export default ProductRepository;
